package com.example.shirocheng.mqttclient.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.shirocheng.mqttclient.bean.Subscription;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SUBSCRIPTION".
 */
public class SubscriptionDao extends AbstractDao<Subscription, Long> {

    public static final String TABLENAME = "SUBSCRIPTION";

    public SubscriptionDao(DaoConfig config) {
        super(config);
    }


    public SubscriptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBSCRIPTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONN_ID\" INTEGER," + // 1: connId
                "\"NAME\" TEXT," + // 2: name
                "\"TOPIC\" TEXT," + // 3: topic
                "\"IS_NUMBER\" INTEGER," + // 4: isNumber
                "\"JSON_KEY\" TEXT);"); // 5: jsonKey
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Subscription entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long connId = entity.getConnId();
        if (connId != null) {
            stmt.bindLong(2, connId);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(4, topic);
        }

        Boolean isNumber = entity.getIsNumber();
        if (isNumber != null) {
            stmt.bindLong(5, isNumber ? 1L: 0L);
        }

        String jsonKey = entity.getJsonKey();
        if (jsonKey != null) {
            stmt.bindString(6, jsonKey);
        }
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBSCRIPTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Subscription entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long connId = entity.getConnId();
        if (connId != null) {
            stmt.bindLong(2, connId);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(4, topic);
        }

        Boolean isNumber = entity.getIsNumber();
        if (isNumber != null) {
            stmt.bindLong(5, isNumber ? 1L: 0L);
        }

        String jsonKey = entity.getJsonKey();
        if (jsonKey != null) {
            stmt.bindString(6, jsonKey);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Subscription readEntity(Cursor cursor, int offset) {
        Subscription entity = new Subscription( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // connId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // topic
                cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isNumber
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // jsonKey
        );
        return entity;
    }

    @Override
    protected final Long updateKeyAfterInsert(Subscription entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
     
    @Override
    public void readEntity(Cursor cursor, Subscription entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConnId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTopic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsNumber(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setJsonKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    public Long getKey(Subscription entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }
    
    /**
     * Properties of entity Subscription.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConnId = new Property(1, Long.class, "connId", false, "CONN_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Topic = new Property(3, String.class, "topic", false, "TOPIC");
        public final static Property IsNumber = new Property(4, Boolean.class, "isNumber", false, "IS_NUMBER");
        public final static Property JsonKey = new Property(5, String.class, "jsonKey", false, "JSON_KEY");
    }

    @Override
    public boolean hasKey(Subscription entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
